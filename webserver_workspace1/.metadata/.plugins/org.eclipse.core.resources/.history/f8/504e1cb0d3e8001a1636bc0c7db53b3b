package com.kh.controller;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class RequestGetServlet
 */
@WebServlet("/test1.do")
public class RequestGetServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public RequestGetServlet() {
        super();
        // TODO Auto-generated constructor stub	
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		/*
		 * Get방식으로 요청했으면 내부적으로 자동으로 이 doGet() 메소드가 호출 될 꺼임
		 * 
		 * 첫번째 매개변수인 HttpServletRequest request 에는 사용자가 받아주는 용도
		 * 두번쨰 매개변수인 HttpServletResponse response 에는 요청 처리후 나중에 사용자에게 응답을 해줄 때 사용
		 * 
		 * request : 요청시 전달된 내용 (사용자가 입력한 값들, 요청전송방식, 요청한 사용자의 ip 등등) 
		 * response : 요청 처리 후 응답을 할 떄 사용하게되는 객체 
		 * 
		 * 
		 */
		
		/*
		 * 요청 처리하기 위해서 전달된 값들 뽑아야됨 (request에 parameter 공간에 담겨있음) 
		 * > request 안의 파라미터 영역안에 데이터가 (키=밸류) 형태로 담겨있음 (name속성값 = value값)
		 * 
		 *  따라서 request로 담겨있는 전달값 뽑는 메소드
		 *  > request.getParameter("키값") : 그에 해당하는 value 값 반환 (단, 무조건 String으로 반환) parseInt로 int형변환 해줘야함. 
		 *  > request.getParameterValues("키값") : 그에 해당하는 values값들이 배열(String[])에 담겨 반환 
		 * 
		 */
		
		String name = request.getParameter("name");							//"홍길동" 	/ " " 
		String gender = request.getParameter("gender"); 					// "M" "F" / null 
		int age = Integer.parseInt(request.getParameter("age"));  			//"20" -> 20 / " " --> 오류 
		String city = request.getParameter("city");							//"서울"
		double height = Double.parseDouble(request.getParameter("height")); // "170" -> 170.0
		String[] foods = request.getParameterValues("food");				// ["한식","양식"] / null 
		
		System.out.println("name: "+ name);
		System.out.println("gender: "+ gender);
		System.out.println("age: "+ age);
		System.out.println("city: "+ city);
		System.out.println("height: "+ height);
		
		if(foods != null) {
			for(int i =0; i<foods.length; i++) {
				System.out.println("foods" + foods[i]);
			}
		} else {
			System.out.println("음식 싫어");
		}//e.if
		
		// ** 자바코드 수정했으면 무조건 서버 리스타트(재실행) 해야됨
		// 요청처리 : > service > DAO > sql실행
		// 요청 처리 다 했다는 가정 하에 
		// int result = new MemberService().insertMember(name, gender, age, city, height, foods); 

		// 요청 처리 다 했다는 가정 하에 응답페이지 만들기!!
		
		// Servlet이 하는 역할은 요청 처리 다 하고 나서 그에 해당하는 응답페이지를 "만들어서" 사용자에게 출력하는 역할 함
		// 즉, 여기 Java 코드 내에 사용자가 보게 될 응답 html 만드는 구문을 작성해야됨!! 
		
		// 장점 : Java코드 내에 작성하기 때문에 반복문이나, 조건문, 유용한 메소드 같은걸 활용할 수 있음
		// 단점 : 복잡할것, 혹시나 html을 수정하고자 했을 떄 수정을 Java 코드내에서 자바코드를 수정하는 거기 때문에 
		//				다시 반영시키고자 한다면 서버 재실행(리스타트) 해야됨 
		
		
		// * response 객체를 통행 사용자에게 html(응답하면) 전달
		
		// 1) 이제부터 내가 전달한 내용은 문서형태의 html이고 문자셋은 UTF-8이야 라는걸 지정
			response.setContentType("text/html; charset=UTF-8");
			
		// 2) 응답하고자 하는 사용자(요청했던 사용자)와의 스트림(클라이언트와의 길) 
			PrintWriter out = response.getWriter();
			
		// 3) 그 스트림(out)을 통해  html 문서를 한줄씩 출력
			out.println("");
		
		
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
